Conventions Used In This Project


File names follow the naming convention Angular recommends for Modules, Components,
Directives, Services, Guards, etc. (the different Angular entities).


Directory names

Inside /src/app/, a directory that contains an entity and all the assets used only in
that entity will be named after that entity, matching its filename (except underscores are
used instead of periods and the extension name is omitted).  Example: a directory
containing  add-images.component.ts  and its assets is named 'add-images_component'.


Services

Each instance of a Service is referred to without 'Service' at the end.


Data Structures

Each class/object used as a data structure is named with 'Data' at the end, and their
filenames end with '.data.ts'.
Any reference to one of these data structures is named without 'Data' at the end.


Interfaces

The names of all files that define interfaces end with '.interface.ts'.


Abstract Class file names

Any abstract Angular entities have 'abstract' in their file names like so:
'example.abstract.component.ts'
'example.abstract.service.ts'


Usage of the word 'Process'

'Process' is used as both a noun and a verb.

As a noun, it's an entire cycle of these steps:
1. Executing an action and getting an initial result.
2. Checking that result for errors and, if any, executing tasks based on those errors.
3. If no errors, executing tasks based on the successful result.

Because of the above steps, every process has an action assigned to it. This is how it
becomes a verb, used like this: 'process the action'.

'Process' is used in the names of Services that execute a process. Those Services follow
this naming convention: `Process{Action}Service`.
Examples:
ProcessDBOperationService executes a process whose action is 'DBOperation'.
ProcessLoginByPasswordService executes a process whose action is 'LoginByPassword'.


Usage of the word 'Execute'

'Execute' refers to running any code. It could be a process, or something much simpler.


Record

The word 'Record' is used as a noun, referring to a saved data structure, most likely
kept in a database.


Load

Any use of the word 'load' is referring to the total pieces of data (each 'piece'
most likely being an object) the app is allowed to have stored in the browser at once.
For example, AllUserImages.getLoad() retrieves N of all a user's images, where N is the
load size.


Path Aliases (paths that begin with '@')

Aliases to files created in this project are defined in  /tsconfig.json.


Label

The word 'label' is the preferred way of specifying a name for display.


Commented-out Import Statements

Some files have some imports commented out.  This is because that entity being
imported is not actually used but is referred to in a comment somewhere.  Example:

// import { ImageRecord } from './image-record.interface';

export interface LibraryRecord {

	// Foreign keys, each relating to `ImageRecord._id`  <----
	_image_ids: string[];

}


Subscribables (Observables, from Rxjs)

The name of any variable or constant referencing a Subscribable ends with '$'.


ContextComponents

Some re-usable Components have @Input properties and need to be nested in an outer
Component that passes values to those @Inputs.  The outer Component is the context for the
inner Component.  Some of these re-usable inner Components have an @Input property named
'context', and its value must be a Component whose name ends with 'ContextComponent'.
There are ContextComponents made specifically to be the contexts for certain re-usable
Components, such as ImagesViewerContextComponent being the context for
ImagesViewerComponent.

If the re-usable inner Component doesn't have a 'context' property, the outer Component it
is nested in isn't referred to as a ContextComponent, simply because it doesn't need to
be.
