Abstract Components that contain Angular decorators

Components that are abstract classes that use Angular decorators inside their definitions,
such as @Input, must be decorated with @Component.  If not, they will trigger
an Angular build error: 'Class is using Angular features but is not decorated. Please add
an explicit Angular decorator.'  You can get away with decorating the class with this
exact line:

@Component({selector: '', template: ''}) // prevents Angular build error

You don't need to add an abstract Component to a Module's 'declarations'.  However, you'll
probably need to add the constant NO_ERRORS_SCHEMA (from @angular/core) to the Module's
'schemas' array. (This would be in any Module with a Component that inherits from the
abstract Component.) This will prevent more build errors.


TypeScript decorators created with getClassModificationDecorator()

Any custom Typescript decorators created by calling getClassModificationDecorator()
have been pre-transpiled into javascript files.  This is done to avoid an Angular
build error: 'Function calls are not supported in decorators...'.


Combining your own TypeScript decorators with @Injectable()

Problem:  Typescript class decorators you make probably won't work when combined with
@Injectable() (and possibly won't work with other Angular decorators) like so:

@Injectable()
@Your_Own_Decorator()
export class ExampleClass { ... }

Solution:
Decorate the class with your own decorator (do not decorate this class
with @Injectable()).  Begin the class' name with two underscores (it's private).
Underneath that class, in the same file, create a subclass.  Give it the
same name without the beginning underscores, indicating it's the public version.
Decorate the subclass with @Injectable() (It's unnecessary to declare the
constructor in the subclass).  The subclass is now injectable and will receive
dependencies in its constructor.
Example:

@Your_Own_Decorator()
export class __TheClass {

	constructor(public obj: ExampleService) {
	}

}

@Injectable()
export class TheClass extends __TheClass {
}

// TheClass is now injectable.


Too Many Stylesheets Listed in /angular.json

There's a limit to how many separate stylesheets the Angular bundler can be configured
to take in the config file  /angular.json  at
projects.{project-name}.architect.build.options.styles  and
projects.{project-name}.architect.test.options.styles.  If you go over the limit, you
won't get any error message.  But the styles in the excessive stylesheets won't be
applied.
