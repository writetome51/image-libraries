In the code, 'data processing' refers to any asynchronous processing of data that returns
a result.  All processing of this kind is handled by subclasses of DataProcessorService.
DataProcessorService.process() calls DataProcessorService._getResult(), and passes
the result to ResultInterpreterService.interpret(result).  This checks if the result contains an
error message, and if so, the appropriate error handler is called.  If no error, the result is
passed to ResultProcessorService.process(result).

Any component that initiates data processing is a subclass of DataProcessorComponent.  These
components usually represent buttons in the UI.


Any form <input> that self-validates during the 'blur' event is an instance of
ValidatingInputComponent.  ValidatingInputComponent depends on the interface ValidatingInput defined
in npm package '@writetome51/validating-inputs'.  ValidatingInput only represents an input of type
'text', 'password', or 'number'.


Any custom typescript decorators created by calling getClassModificationDecorator() have been
pre-transpiled into javascript files.  This is done to avoid an Angular build error which says
'Function calls are not supported in decorators...'.
